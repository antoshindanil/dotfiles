# Display line numbers
add-highlighter global/ number-lines -relative -hlcursor -separator ' '

# Width of a tab
set-option global tabstop 2

# Indent with 2 spaces
set-option global indentwidth 2

# Always keep one line and three columns displayed around the cursor
set-option global scrolloff 1,3

# Highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Error

# Softwrap long lines
add-highlighter global/ wrap -word -indent

define-command -hidden open_buffer_picker %{
  prompt buffer: -menu -buffer-completion %{
    buffer %val{text}
  }
}

define-command -hidden open_file_picker %{
  prompt file: -menu -shell-script-candidates 'fd --type=file' %{
    edit -existing %val{text}
  }
}

define-command -hidden open_rg_picker %{
  prompt search: %{
    prompt refine: -menu -shell-script-candidates "rg -in '%val{text}'" %{
      eval "edit -existing  %sh{(cut -d ' ' -f 1 | tr ':' ' ' ) <<< $kak_text}"
    }
  }
}

# set-option global grepcmd 'rg --vimgrep'
set-option global grepcmd 'rg --column --smart-case --sort path'
map -docstring "grep" global user / ":grep<ret>"

map -docstring "buffer picker" global user b ":open_buffer_picker<ret>"
map -docstring "file picker"   global user f ":open_file_picker<ret>"
map -docstring "rg picker"     global user r ":open_rg_picker<ret>"

map -docstring "yank the selection into the clipboard" global user y "<a-|> xclip.exe<ret>"
map -docstring "paste the clipboard" global user p "<a-!> xsel<ret>"

map -docstring "next buffer"  global user ] ":bn<ret>"
map -docstring "next buffer"  global user [ ":bp<ret>"
map -docstring "close buffer" global user q ":db<ret>"

